{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bemvindo ao PetalFlow","text":""},{"location":"#estrutura-do-projeto","title":"Estrutura do projeto","text":"<pre><code>petalsync/\n    logs/\n    config/\n    app.py\n    service.py  # Scritp execution the aplication\nDockerfile\ndocker-compose.yml\nproject.toml\nsupervisor.conf\nREADME.md\n</code></pre> <p>Bem-vindo ao guia de documenta\u00e7\u00e3o abrangente do PetalSync, uma poderosa ferramenta de automatiza\u00e7\u00e3o de scripts Python e SQL. Desenvolvido utilizando um conjunto de tecnologias avan\u00e7adas, incluindo Python, Docker, FastAPI e MongoDB, o PetalSync n\u00e3o \u00e9 apenas uma solu\u00e7\u00e3o robusta, mas tamb\u00e9m parte integrante do projeto petalFlow.</p> <p>Projetado para atender \u00e0s complexidades e demandas da engenharia de dados, da automa\u00e7\u00e3o de processos rob\u00f3ticos (RPA) e da extra\u00e7\u00e3o, transforma\u00e7\u00e3o e carga (ETL), o PetalSync destaca-se como uma ferramenta vers\u00e1til e essencial. Sua funcionalidade central concentra-se na automa\u00e7\u00e3o do fluxo de ingest\u00e3o de dados, proporcionando efici\u00eancia e confiabilidade em cada etapa do processo.</p> <p>Neste guia, exploraremos detalhadamente as funcionalidades, configura\u00e7\u00f5es e melhores pr\u00e1ticas do PetalSync, fornecendo uma vis\u00e3o abrangente para facilitar a implementa\u00e7\u00e3o e utiliza\u00e7\u00e3o eficaz dessa ferramenta inovadora. Prepare-se para desbravar o potencial do PetalSync e elevar suas capacidades de automatiza\u00e7\u00e3o a um novo patamar.</p>"},{"location":"#comando-para-executar-localmente","title":"Comando para Executar Localmente","text":"<ul> <li><code>sudo docker-compose up -d</code> - Construir o container com base no arquivo docker-compose.yml.</li> </ul>"},{"location":"#proposta-do-projeto","title":"Proposta do Projeto","text":"<p>Para obter informa\u00e7\u00f5es detalhadas sobre o Convutell e como us\u00e1-lo, consulte a documenta\u00e7\u00e3o completa em mkdocs.org.</p>"},{"location":"#torne-se-um-contribuidor","title":"Torne-se um Contribuidor","text":"<p>Junte-se a n\u00f3s! Torne-se parte ativa da comunidade PetalSync e contribua para o seu desenvolvimento.</p>"},{"location":"instalation/","title":"Instala\u00e7\u00e3o","text":"<p>A instala\u00e7\u00e3o do PetalSync \u00e9 bastante simples e pode ser realizada em servidores Linux e Windows atrav\u00e9s do Docker.</p>"},{"location":"instalation/#configurando-o-projeto-localmente","title":"Configurando o Projeto Localmente","text":"<p>Para executar o projeto, siga os passos abaixo:</p> <ol> <li>Clone o reposit\u00f3rio do projeto no Github.</li> <li> <p>Instale as depend\u00eancias utilizando o gerenciador de pacotes <code>Poetry</code> com o comando:</p> <p><code>poetry install</code></p> </li> <li> <p>A API de integra\u00e7\u00e3o \u00e9 constru\u00edda sobre o FastAPI 0.95.1 e requer o Python na vers\u00e3o superior a 3.10. Qualquer adapta\u00e7\u00e3o necess\u00e1ria pode ser feita em vers\u00f5es subsequentes.</p> </li> <li>Crie um arquivo <code>.env</code> contendo a string de conex\u00e3o com o MongoDB. Veja o exemplo abaixo do local de cria\u00e7\u00e3o e do conte\u00fado do arquivo:</li> </ol> <pre><code>    petalsync/\n        api/\n        app/\n        ...\n        .env  # Conte\u00fado do arquivo contendo a string de conex\u00e3o com o banco de dados\n</code></pre> <pre><code>Exemplo do conte\u00fado do arquivo:\n\n```\nMONGODB_CONNECTION_STRING=mongodb://user:password@localhost:27017/?authMechanism=DEFAULT\nMONGODB_CONNECTION_STRING_DB=database\n```\n</code></pre> <ol> <li> <p>Execute o servidor web com o comando:</p> <p><code>uvicorn app:app --reload</code></p> </li> </ol>"},{"location":"instalation/#instalacao-local-via-docker","title":"Instala\u00e7\u00e3o Local via Docker","text":"<p>Para a instala\u00e7\u00e3o via Docker, \u00e9 necess\u00e1rio possuir o Docker instalado.</p> <p>Configure o arquivo <code>docker-compose.yml</code> para adequar as configura\u00e7\u00f5es ao seu ambiente. Esta implementa\u00e7\u00e3o do projeto para a imagem Docker est\u00e1 em desenvolvimento, portanto, avalie a viabilidade das configura\u00e7\u00f5es fornecidas.</p> <pre><code>version: '3'\n\nservices:\n  petalsync:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"8000:8000\"\n      - \"5000:5000\"\n    networks:\n      - hostnet\n    environment:\n      MONGO_HOST: host.docker.internal\nnetworks:\n  hostnet:\n    external: true\n\n\n</code></pre> <p>Optamos por utilizar o Supervisor para monitoramento e controle dos nossos processos. Tanto a API como Processo de ETL ser\u00e1 monitorados pelo Supervisor. Toda a configura\u00e7\u00e3o ser\u00e1 passada para o controle do Supervidor atrav\u00e9s do arquivo supervisord.conf.</p> <pre><code>[program:etl]\ncommand=/opt/venv/bin/python /petalsync/etl.py\ndirectory=/petalsync\nautostart=true\nautorestart=true\nstartretries=3\nredirect_stderr=true\nstdout_logfile=/petalsync/logs/etl/etl.log\nstdout_logfile_maxbytes=10MB\n\n</code></pre> <p>Com o projeto devidamente baixado em sua m\u00e1quina, para seguir com a cria\u00e7\u00e3o da projeton em um container docker, basta executar os comando baixo:</p> <p>Use o comando abaixo para inicar o seu container. A necesside do comando linux sudo depende da configura\u00e7lao do seu amviente local. </p> <pre><code>sudo docker-compose up -d\n</code></pre> <p>As aplica\u00e7\u00e3o executa por padr\u00e3o na porta 8000. Voc\u00ea pode conferir em seu navegador atrav\u00e9s do <code>127.0.0.1:8000/docs</code>.</p>"},{"location":"Estrutura%20do%20projeto/Estrutura%20do%20projeto/","title":"Estrutura do projeto","text":"<p>O projeto consiste em tr\u00eas aplica\u00e7\u00f5es que operam em conjunto, embora inicialmente se apresentem como entidades separadas. A API desempenha o papel de ferramenta respons\u00e1vel pelo controle, gerenciamento e persist\u00eancia dos dados. Associado a ela est\u00e1 o servidor, respons\u00e1vel por executar as a\u00e7\u00f5es que s\u00e3o obtidas por meio da API e armazenadas em um banco de dados. Neste projeto, optamos por utilizar o MongoDB devido \u00e0 necessidade de lidar com grandes volumes de dados, como logs, scripts de execu\u00e7\u00e3o em Python e SQL. Estamos considerando a inclus\u00e3o de outra linguagem de captura em breve.</p>"},{"location":"Estrutura%20do%20projeto/Estrutura%20do%20projeto/#_1","title":"Estrutura do projeto","text":"<pre><code>petalsync/\n    logs/\n    config/\n    app.py\n    service.py  # Application execution configuration file.\nDockerfile\ndocker-compose.yml\nproject.toml\nsupervisor.conf\nREADME.md\n    ...\n</code></pre> <p>Por fim, temos a aplica\u00e7\u00e3o gr\u00e1fica, que contribui para uma experi\u00eancia mais amig\u00e1vel do Petalsync. Essa interface est\u00e1 sendo desenvolvida em React e, embora atualmente n\u00e3o fa\u00e7a parte do pacote Petalsync, os usu\u00e1rios t\u00eam a op\u00e7\u00e3o de baix\u00e1-la e adicion\u00e1-la \u00e0 mesma \u00e1rvore de diret\u00f3rios, conforme exemplificado acima.</p>"},{"location":"Gerenciamento/Integra%C3%A7%C3%A3o/","title":"API","text":"<p>A API \u00e9 utilizada para realizar o gerenciamento da aplica\u00e7\u00e3o e \u00e9 consumida pela aplica\u00e7\u00e3o front-end para facilitar a utiliza\u00e7\u00e3o da ferramenta.</p> <p>Utilizamos o framework FastAPI para a constru\u00e7\u00e3o da API e o MongoDB como banco de dados para persist\u00eancia dos dados.</p> <p></p>"},{"location":"Gerenciamento/Integra%C3%A7%C3%A3o/#projetos","title":"Projetos","text":"<p>Todos os scripts s\u00e3o realizados dentro de um projeto. O projeto \u00e9 respons\u00e1vel por gerenciar uma ou v\u00e1rias consultas constru\u00eddas em Python ou SQL. O projeto pode possuir conex\u00f5es ou n\u00e3o, dependendo do tipo de projeto. Caso seja um script, ele n\u00e3o verificar\u00e1 conex\u00e3o.</p> <p>Para executar os projetos, eles precisam estar ativos, o que \u00e9 indicado pelo campo fl_actived na documenta\u00e7\u00e3o.</p> <p>URL: /GetAllProjects               M\u00e9todo: GET                Par\u00e2metros: Nenhum     Resposta de Sucesso: Lista de objetos ProjectModel representando os projetos cadastrados.</p> <p>Exemplo de requisi\u00e7\u00e3o:</p> <pre><code>\n[\n  {\n    \"id_project\": 1,\n    \"name_project\": \"Projeto 1\",\n    \"dt_last_run\": \"2023-06-15T10:30:00\",\n    \"fl_active\": true,\n    \"connection_origin1\": \"origem1\",\n    \"connection_origin2\": \"origem2\"\n  }\n]\n\n</code></pre>"},{"location":"Gerenciamento/Integra%C3%A7%C3%A3o/#query-queries","title":"Query (Queries)","text":"<p>A rota de Consultas (Queries) permite gerenciar opera\u00e7\u00f5es espec\u00edficas realizadas dentro de um projeto. Essa rota oferece endpoints para criar, recuperar, atualizar e excluir consultas.</p> <p>Criar Consulta Endpoint para criar uma nova consulta.</p> <pre><code>URL: /CreateQueries                 \nM\u00e9todo: POST                    \nPar\u00e2metros: Nenhum              \nCorpo da Requisi\u00e7\u00e3o: Objeto QuerySaveModel   representando os dados da consulta a ser criada.                                   \nResposta de Sucesso: Retorna o objeto QuerySaveModel representando a consulta criada.  \n\n</code></pre>"},{"location":"Gerenciamento/Integra%C3%A7%C3%A3o/#obter-consulta-por-id","title":"Obter Consulta por ID","text":"<p>Recupera uma consulta com base em um ID espec\u00edfico.</p> <pre><code>URL: /GetQueriesId/{id_query}               \nM\u00e9todo: GET                 \nPar\u00e2metros: id_query - ID da consulta a ser recuperada.                                 \nResposta de Sucesso: Retorna o objeto QueryModel representando a consulta encontrada.   \n</code></pre>"},{"location":"Gerenciamento/Integra%C3%A7%C3%A3o/#obter-consultas-por-id-do-projeto","title":"Obter Consultas por ID do Projeto","text":"<p>Recupera todas as consultas associadas a um projeto espec\u00edfico.</p> <p>URL: /GetqueriesIdprojects/{id_project}                M\u00e9todo: GET                    Par\u00e2metros: id_project - ID do projeto para o qual as consultas devem ser recuperadas.     Resposta de Sucesso: Retorna o objeto       QueryModel representando a consulta encontrada.                                                  </p>"},{"location":"Gerenciamento/Integra%C3%A7%C3%A3o/#atualizar-consulta","title":"Atualizar Consulta","text":"<p>Atualiza uma consulta existente com base em um ID espec\u00edfico.</p> <p>URL: /UpdateQueries/{id_query}             M\u00e9todo: PUT                            Par\u00e2metros: id_query - ID da consulta a ser atualizada.                            Corpo da Requisi\u00e7\u00e3o: Objeto QuerySaveModel representando os dados atualizados da consulta.                                     Resposta de Sucesso: Retorna o objeto QueryModel representando a consulta atualizada.                                   </p>"},{"location":"Gerenciamento/Integra%C3%A7%C3%A3o/#excluir-consulta","title":"Excluir Consulta","text":"<p>Exclui uma consulta existente com base em um ID espec\u00edfico.</p> <p>URL: /DeleteQueries/{id_query}             M\u00e9todo: DELETE                             Par\u00e2metros: id_query - ID da consulta a ser exclu\u00edda.                                   Resposta de Sucesso: Retorna um objeto contendo a mensagem \"Consulta exclu\u00edda com sucesso\".                                     </p> <p>Essas rotas permitem o gerenciamento completo das consultas, incluindo cria\u00e7\u00e3o, recupera\u00e7\u00e3o, atualiza\u00e7\u00e3o e exclus\u00e3o. Voc\u00ea pode utilizar essas informa\u00e7\u00f5es para documentar a funcionalidade e os retornos dessas rotas na sua documenta\u00e7\u00e3o.</p>"}]}